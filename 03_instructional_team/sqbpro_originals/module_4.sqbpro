<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/thomas/Documents/GitHub/02-intro_sql/05_src/sql/farmersmarket.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="12168"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/><expanded_item id="4" parent="1"/></tab_structure><tab_browse><table title="booth" custom_title="0" dock_id="2" table="4,5:mainbooth"/><dock_state state="000000ff00000000fd0000000100000002000004ee0000034afc0100000002fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000000000000000fc00000000000004ee0000012f00fffffffa000000000100000002fb000000160064006f0063006b00420072006f00770073006500320100000000ffffffff0000012f00fffffffb000000180064006f0063006b00420072006f007700730065003100390000000000ffffffff0000000000000000000004ee0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="booth" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="136"/><column index="2" value="164"/><column index="3" value="300"/><column index="4" value="108"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="temp" name="row_rank_dense" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="72"/><column index="2" value="80"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 2">/* MODULE 4 */
/* NULL Management */


/* 1. IFNULL: Missing product_size, missing product_qty_type */ 


/* 2. Coalesce */



/* 3. NULLIF
finding values in the product_size column that are &quot;blank&quot; strings and setting them to NULL if they are blank */



/* 4. NULLIF 
filtering which rows are null or blank */


</sql><sql name="SQL 7">/* MODULE 4 */
/* NULLIF Budget (example from the slides) */

/* The following example creates a budgets table to show a department (dept) 
...its current budget (current_year) and its previous budget (previous_year). 

For the current year, NULL is used for departments with budgets that have not changed from the previous year, 
and 0 is used for budgets that have not yet been determined. 

To find out the average of only those departments that receive a budget and to include the budget value 
from the previous year (use the previous_year value, where the current_year is NULL), 
combine the NULLIF and COALESCE functions. */

DROP TABLE IF EXISTS temp.budgets; 
CREATE TEMP TABLE IF NOT EXISTS temp.budgets (
dept STRING
,current_year INT
,previous_year INT
);


INSERT INTO temp.budgets VALUES 
('software',1000,1000)
, ('candles',NULL,500)
, ('coffee', 400, 200)
, ('pencils',0, 50);


/*examine each of these columns */
SELECT 
NULLIF(current_year, previous_year)
--,NULLIF(COALESCE(current_year, previous_year), 0.00)
--,
--AVG(NULLIF(COALESCE(current_year, previous_year), 0.00)) 
FROM budgets


/* more NULLIF here: 
https://learn.microsoft.com/en-us/sql/t-sql/language-elements/nullif-transact-sql?view=sql-server-ver17
*/

</sql><sql name="SQL 10">/* MODULE 4 */
/* Windowed functions: row_number */


/* 1. What product is the highest price per vendor */
SELECT *

FROM (
		SELECT 
		vendor_id
		,market_date
		,product_id
		,original_price
		,ROW_NUMBER() OVER (PARTITION BY vendor_id ORDER BY original_price DESC) as price_rn

		FROM vendor_inventory
) x

WHERE x.price_rn = 1;




/* See how this varies from using max due to the group by 
SELECT vendor_id,
--product_id,
MAX(original_price)

FROM vendor_inventory
GROUP BY vendor_id--,product_id

*/

</sql><sql name="SQL 9">/* MODULE 4 */
/* Windowed functions: dense_rank, rank, row_number */


/* 1. Compare dense_rank, rank, and row_number */

DROP TABLE IF EXISTS TEMP.row_rank_dense;

CREATE TEMP TABLE IF NOT EXISTS TEMP.row_rank_dense
(
emp_id INT,
salary INT
);

INSERT INTO temp.row_rank_dense
VALUES
(1,200000),
(2,200000),
(3, 160000),
(4, 120000),
(5, 125000),
(6, 165000),
(7, 230000),
(8, 100000),
(9, 165000),
(10, 100000);


</sql><sql name="SQL 8">/* MODULE 4 */
/* Windowed functions: NTILE */


/* 1. Calculate quartile, quntiles, and percentiles from vendor daily sales */


-- vendor daily sales 
	SELECT 
	md.market_date
	,market_day
	,market_week
	,market_year
	,vendor_name
	,SUM(quantity*cost_to_customer_per_qty) AS sales

	FROM customer_purchases AS cp
	JOIN market_date_info AS md
		ON cp.market_date = md.market_date
	JOIN vendor AS v
		ON v.vendor_id = cp.vendor_id
		
	GROUP BY cp.market_date, v.vendor_id</sql><sql name="SQL 11">/* MODULE 4 */
/* String Manipulations */


/* 1. ltrim, rtrim, trim*/
SELECT

/* 2. replace*/

/* 3. upper, lower*/

/* 4. concat with || */

/* 5. substr */

/* 6. length */

/* 7. unicode, char */


/* 8. REGEXP in a WHERE statement */</sql><sql name="SQL 12">/* MODULE 4 */
/* Substring &amp; instring together */


/* think of this as a comma delimiter ... but it's a bit silly ... do this in python/R instead unless you have to */

SELECT 
'FirstWord, SecondWord, ThirdWord',
 SUBSTR('FirstWord, SecondWord, ThirdWord',0, INSTR('FirstWord, SecondWord, ThirdWord',',')) as FirstDelim
 --,SUBSTR('FirstWord, SecondWord, ThirdWord',0, 10) as FirstDelim -- same thing but not dynamic
 ,SUBSTR('FirstWord, SecondWord, ThirdWord', 
  INSTR('FirstWord, SecondWord, ThirdWord',',')+1,
  INSTR('FirstWord, SecondWord, ThirdWord',',')+1) as SecondDelim
  
  ,SUBSTR('FirstWord, SecondWord, ThirdWord',
  INSTR(
    (SUBSTR('FirstWord, SecondWord, ThirdWord',
    INSTR('FirstWord, SecondWord, ThirdWord',',')+1))
  ,',') + 
  INSTR('FirstWord, SecondWord, ThirdWord',',')+1) AS ThirdDelim
</sql><sql name="SQL 33">/* MODULE 4 */
/* UNION */

/* 1. Find the most and least expensive product by vendor with UNION (and row_number!) */

</sql><sql name="SQL 52">/* MODULE 4 */
/* UNION */

/* 1. Emulate a FULL OUTER JOIN with a UNION */
DROP TABLE IF EXISTS temp.store1; 
CREATE TEMP TABLE IF NOT EXISTS temp.store1
(
costume TEXT,
quantity INT
);

INSERT INTO temp.store1
VALUES(&quot;tiger&quot;,6),
        (&quot;elephant&quot;,2),
        (&quot;princess&quot;, 4);


DROP TABLE IF EXISTS temp.store2;
CREATE TEMP TABLE IF NOT EXISTS temp.store2
(
costume TEXT,
quantity INT
);

INSERT INTO temp.store2
VALUES(&quot;tiger&quot;,2),
	(&quot;dancer&quot;,7),
	(&quot;superhero&quot;, 5);</sql><sql name="SQL 53">/* MODULE 4 */
/* INTERSECT &amp; EXCEPT */

/* 1. Find products that have been sold (e.g. are in customer purchases AND product) */ 



/* 2. Find products that have NOT been sold (e.g. are NOT in customer purchases even though in product) */



/* 3. Directions matter... if we switch the order here:
products that do not exist, because no products purchased are NOT in the product table (e.g. are NOT in product even though in customer purchases)*/



/* 4. We can remake the intersect with a WHERE subquery for more details ...  */


</sql><current_tab id="0"/></tab_sql></sqlb_project>
