<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/thomas/Documents/GitHub/02-intro_sql/05_src/sql/farmersmarket.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="12168"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="booth" custom_title="0" dock_id="2" table="4,5:mainbooth"/><dock_state state="000000ff00000000fd000000010000000200000536000003a5fc0100000002fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000000000000000fb000000160064006f0063006b00420072006f00770073006500320100000000000005360000012300ffffff000005360000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="booth" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="136"/><column index="2" value="164"/><column index="3" value="300"/><column index="4" value="108"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 2*">/* MODULE 2 */
/* SELECT */


/* 1. Select everything in the customer table */
SELECT 

/* 2. Use sql as a calculator */



/* 3. Add order by and limit clauses */



/* 4. Select multiple specific columns */



/* 5. Add a static value in a column */</sql><sql name="SQL 7*">/* MODULE 2 */
/* WHERE */

/* 1. Select only customer 1 from the customer table */
SELECT * 
FROM customer
WHERE 


/* 2. Differentiate between AND and OR */



/* 3. IN */



/* 4. LIKE */



/* 5. Nulls and Blanks*/



/* 6. BETWEEN x AND y */</sql><sql name="SQL 10">/* MODULE 2 */
/* CASE */


SELECT * 
/* 1. Add a CASE statement declaring which days vendors should come */


/* 2. Add another CASE statement for Pie Day */



/* 3. Add another CASE statement with an ELSE clause to handle rows evaluating to False */



/* 4. Experiment with selecting a different column instead of just a string value */


FROM vendor</sql><sql name="SQL 9*">/* MODULE 2 */
/* DISTINCT */


/* 1. Compare how many customer_ids are the customer_purchases table, one select with distinct, one without */

-- 4221 rows
SELECT customer_id FROM customer_purchases 



/* 2. Compare the difference between selecting market_day in market_date_info, with and without distinct:
 what do these difference mean?*/

 

/* 3. Which vendor has sold products to a customer */



/* 4. Which vendor has sold products to a customer ... and which product was it */



/* 5. Which vendor has sold products to a customer 
... and which product was it? 
... AND to whom was it sold*/

</sql><sql name="SQL 8">/* MODULE 2 */
/* INNER JOIN */


/* 1. Get product names (from product table) alongside customer_purchases 
 ... use an INNER JOIN to see only products that have been purchased */
 
-- without table aliases




/* 2. Using the Query #4 from DISTINCT earlier 
    (Which vendor has sold products to a customer AND which product was it AND to whom was it sold)

    Add customers' first and last names with an INNER JOIN  */

-- using table aliases


</sql><sql name="SQL 11">/* MODULE 2 */
/* LEFT  JOIN */


/* 1. There are products that have been bought
... but are there products that have not been bought? 
Use a LEFT JOIN to find out*/


/* 2. Directions of LEFT JOINs matter ...*/




/* 3. As do which values you filter on ... */




/* 4. Without using a RIGHT JOIN, make this query return the RIGHT JOIN result set
...**Hint, flip the order of the joins** ...

SELECT *

FROM product_category AS pc
LEFT JOIN product AS p
	ON pc.product_category_id = p.product_category_id
	ORDER by pc.product_category_id

...Note how the row count changed from 24 to 23
*/	

</sql><sql name="SQL 12">/* MODULE 2 */
/* Multiple Table JOINs */


/* 1. Using the Query #4 from DISTINCT earlier 
    (Which vendor has sold products to a customer AND which product was it AND to whom was it sold)

    Replace all the IDs (customer, vendor, and product) with the names instead*/ 



/* 2. Select product_category_name, everything from the product table, and then LEFT JOIN the customer_purchases table
... how does this LEFT JOIN affect the number of rows? 

Why do we have more rows now?*/

</sql><current_tab id="3"/></tab_sql></sqlb_project>
