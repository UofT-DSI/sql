<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/thomas/Documents/GitHub/02-intro_sql/05_src/sql/farmersmarket.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="12168"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="product_category" custom_title="0" dock_id="2" table="4,16:mainproduct_category"/><dock_state state="000000ff00000000fd000000010000000200000558000003a5fc0100000002fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000000000000000fb000000160064006f0063006b00420072006f00770073006500320100000000000005580000011e00ffffff000005580000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="booth" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="136"/><column index="2" value="164"/><column index="3" value="300"/><column index="4" value="108"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customer" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="0" mode="0"/></sort><column_widths><column index="1" value="116"/><column index="2" value="194"/><column index="3" value="190"/><column index="4" value="209"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customer_purchases" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="103"/><column index="2" value="94"/><column index="3" value="118"/><column index="4" value="119"/><column index="5" value="80"/><column index="6" value="242"/><column index="7" value="155"/></column_widths><filter_values><column index="0" value="6"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="market_date_info" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="118"/><column index="2" value="111"/><column index="3" value="124"/><column index="4" value="118"/><column index="5" value="170"/><column index="6" value="161"/><column index="7" value="129"/><column index="8" value="176"/><column index="9" value="167"/><column index="10" value="172"/><column index="11" value="156"/><column index="12" value="168"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="product" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="103"/><column index="2" value="300"/><column index="3" value="134"/><column index="4" value="191"/><column index="5" value="163"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="product_category" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="189"/><column index="2" value="279"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 2*">/* MODULE 2 */
/* SELECT */


/* 1. Select everything in the customer table */
SELECT *
FROM customer;

/* 2. Use sql as a calculator */
SELECT 1+1 as something, 10*5 as somethingelse, pi() as pi;


/* 3. Add order by and limit clauses */
SELECT * 
FROM customer
ORDER BY customer_first_name
LIMIT 10;


/* 4. Select multiple specific columns */
SELECT customer_id, customer_first_name 
FROM customer;



/* 5. Add a static value in a column */
SELECT 2025 as this_year, 'October' as this_month, customer_id
FROM customer
</sql><sql name="SQL 7*">/* MODULE 2 */
/* WHERE */

/* 1. Select only customer 1 from the customer table */
SELECT * 
FROM customer
WHERE customer_id = 1;


/* 2. Differentiate between AND and OR */
SELECT * 
FROM customer
WHERE customer_id = 1
OR customer_id = 2;


/* 3. IN */
SELECT * 
FROM customer
WHERE customer_id IN (3,4,5)
OR customer_postal_code IN ('M4M','M1L'); -- customers in these postal codes


/* 4. LIKE */
-- all the peppers
SELECT * FROM product
WHERE product_name LIKE '%pepper%';

--- customer with a last name starting with a
SELECT * FROM customer
WHERE customer_last_name LIKE 'a%';

/* 5. Nulls and Blanks*/

SELECT * FROM product
WHERE product_size IS NULL -- null
OR product_size = ''; -- blank, two single quotes not one double quote -- different from NULL


/* 6. BETWEEN x AND y */
SELECT * 
FROM customer
WHERE customer_id BETWEEN 1 AND 20;
--dates

SELECT market_date, market_day, market_year
FROM market_date_info

WHERE market_date BETWEEN '2022-10-01' AND '2022-10-31'
AND market_date = 'Wednesday';
</sql><sql name="SQL 10*">/* MODULE 2 */
/* CASE */


SELECT * 
/* 1. Add a CASE statement declaring which days vendors should come */
,CASE WHEN vendor_type = 'Fresh Focused' THEN 'Wednesday'
	WHEN vendor_type = 'Prepared Foods' THEN 'Thursday'
	ELSE 'Saturday'
END as day_of_specialty

/* 2. Add another CASE statement for Pie Day */
,CASE WHEN vendor_name = &quot;Annie's Pies&quot; -- double quotes will work here!
	THEN 'Annie is great'
	END as pie_day


/* 3. Add another CASE statement with an ELSE clause to handle rows evaluating to False */
,CASE WHEN vendor_name LIKE '%pie%'
	THEN 'Wednesday'
	ELSE 'Friday'
	END as also_pie_day



FROM vendor;


/* 4. Experiment with selecting a different column instead of just a string value */
SELECT *
,CASE WHEN cost_to_customer_per_qty &lt; '1.00' 
THEN cost_to_customer_per_qty*5
ELSE cost_to_customer_per_qty
END AS inflation

FROM customer_purchases




</sql><sql name="SQL 9*">/* MODULE 2 */
/* DISTINCT */


/* 1. Compare how many customer_ids are the customer_purchases table, one select with distinct, one without */

-- 4221 rows
SELECT customer_id FROM customer_purchases;

SELECT DISTINCT customer_id FROM customer_purchases;



/* 2. Compare the difference between selecting market_day in market_date_info, with and without distinct:
 what do these difference mean?*/
-- market is open for 150 days
 SELECT market_day
 FROM market_date_info;
 
 -- market is only open on 2 days, wed and sat
 SELECT DISTINCT market_day
 FROM market_date_info;
 
 

/* 3. Which vendor has sold products to a customer */
-- 3 vendors have sold products
SELECT DISTINCT vendor_id
FROM customer_purchases;


/* 4. Which vendor has sold products to a customer ... and which product was it */
SELECT DISTINCT vendor_id, product_id
FROM customer_purchases;


/* 5. Which vendor has sold products to a customer 
... and which product was it? 
... AND to whom was it sold*/
SELECT DISTINCT vendor_id, product_id,customer_id
FROM customer_purchases
</sql><sql name="SQL 8*">/* MODULE 2 */
/* INNER JOIN */


/* 1. Get product names (from product table) alongside customer_purchases 
 ... use an INNER JOIN to see only products that have been purchased */
 
-- without table aliases
SELECT product_name, -- coming from the product TABLE
vendor_id, -- rest are coming from customer_purchases
market_date,
customer_id, 
customer_purchases.product_id,
product.product_id

FROM product
INNER JOIN customer_purchases
	ON customer_purchases.product_id = product.product_id;



/* 2. Using the Query #4 from DISTINCT earlier 
    (Which vendor has sold products to a customer AND which product was it AND to whom was it sold)

    Add customers' first and last names with an INNER JOIN  */

-- using table aliases
SELECT DISTINCT 
vendor_id, 
product_id, 
c.customer_id,
customer_first_name, -- coming from customer
customer_last_name  -- coming from customer


FROM customer_purchases as cp
INNER JOIN customer as c
	ON c.customer_id = cp.customer_id;
	
SELECT DISTINCT product_name, -- coming from the product TABLE
customer_purchases.product_id,
product.product_id

FROM product
INNER JOIN customer_purchases
	ON customer_purchases.product_id = product.product_id;
	


</sql><sql name="SQL 11*">/* MODULE 2 */
/* LEFT  JOIN */


/* 1. There are products that have been bought
... but are there products that have not been bought? 
Use a LEFT JOIN to find out*/
SELECT DISTINCT 
p.product_id
,cp.product_id as [cp.product_id]
,product_name

FROM product as p
LEFT JOIN customer_purchases as cp
	ON p.product_id = cp.product_id;



/* 2. Directions of LEFT JOINs matter ...*/
-- only products that have been sold ... because there are no product ids in CP that ARENT in product
SELECT DISTINCT 
p.product_id
,cp.product_id as [cp.product_id]
,product_name

FROM customer_purchases as p
LEFT JOIN product  as cp
	ON p.product_id = cp.product_id


/* 3. As do which table's values you filter on ... */
SELECT DISTINCT 
p.product_id
,cp.product_id as [cp.product_id]
,product_name

FROM product as p
LEFT JOIN customer_purchases as cp
	ON p.product_id = cp.product_id

WHERE p.product_id BETWEEN 1 AND 6 -- if we pick product, 6 rows (1-6), otherwise 5 rows because zinnias not been bought



/* 4. Without using a RIGHT JOIN, make this query return the RIGHT JOIN result set
...**Hint, flip the order of the joins** ...

SELECT *

FROM product_category AS pc
LEFT JOIN product AS p
	ON pc.product_category_id = p.product_category_id
	ORDER by pc.product_category_id

...Note how the row count changed from 24 to 23
*/	

SELECT *

FROM product AS p
LEFT JOIN product_category AS pc
	ON pc.product_category_id = p.product_category_id
	ORDER by pc.product_category_id

</sql><sql name="SQL 12">/* MODULE 2 */
/* Multiple Table JOINs */


/* 1. Using the Query #4 from DISTINCT earlier 
    (Which vendor has sold products to a customer AND which product was it AND to whom was it sold)

    Replace all the IDs (customer, vendor, and product) with the names instead*/ 



/* 2. Select product_category_name, everything from the product table, and then LEFT JOIN the customer_purchases table
... how does this LEFT JOIN affect the number of rows? 

Why do we have more rows now?*/</sql><current_tab id="4"/></tab_sql></sqlb_project>
